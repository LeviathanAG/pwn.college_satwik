import math
from Crypto.Util.number import bytes_to_long

u1 = 60616161
u2 = 900840613
base_bits = 2048
x_bits = 256

bitlen_u1 = u1.bit_length()
bitlen_u2 = u2.bit_length()

p_total_bits = base_bits + bitlen_u1
q_total_bits = base_bits + bitlen_u2

p_known_bits = p_total_bits - x_bits
q_known_bits = q_total_bits - x_bits

print(f"u1 = {u1} -> bitlen(u1) = {bitlen_u1}")
print(f"u2 = {u2} -> bitlen(u2) = {bitlen_u2}")
print()
print(f"p total bits = {p_total_bits}, known high bits = {p_known_bits}")
print(f"q total bits = {q_total_bits}, known high bits = {q_known_bits}")
print()
print(f"Known fraction of p = {p_known_bits / p_total_bits * 100:.6f}%")
print(f"Known fraction of q = {q_known_bits / q_total_bits * 100:.6f}%")

y = u1 * (2**base_bits )
print(f"y = {y} -> bitlen(y) = {y.bit_length()}")


number =389007094093500254659269222829300387668660508842596830283034437854937893235049227182800673983137449438686100431357337665683342739525263623592976332059392395264355698296935420024804741703608973190824917028700611656793563033953362739610335126391232258457097837434427619484534528039920830798211549635295178547023617400379055165909284909149495704721001995786010441636120118520833637102034834824318276159998436988458827216771341547723063116002296802980383058543399672672199299812493420476411710717355307773919162706183079395944012029903656708803248090318792228189733289364091794724586461446778415085835534447274059679497460815715111338701331142301424455494636080084200859380926481450668571474030244841321651468346520918746151217651066760145599691569837763734157601936442708850694948902162338810617437621276232570511323743061902828900722778980874258644691568558368246727586863719198403474239414064157294529929203124574829369966931627809307593655658002862921413850262644887434399341306324601519965584391277327657682339232296466760699235858204994705697120103836006265934580279994007554238442080989089861523384446940617433150587916974122607314408287293310331411631383254795350186812538871979413905851197122211878687803160562136852590752062852078911108328555229
result = math.log2(number)
print(f"log2(number) = {result} -> bitlen(number) = {math.ceil(result)}")

p=15900336661317465318564232208300058060118974033590457019229973489363475782853135829256950377256219834741960372018328811182551816335678655644429777687507703877261008561318294633235390823703775543774109998188286718941095289798357972959015077680491413700440182742648763524394072929618827716086700442160867328316461837205776468887145957810416351703579690269178218550372302736409801974421180866639460792497218914751202481098366169305124702334471240963494119699607775093336383843968430950257156340121736865514491012602531675516010309647192428019953460929328787281821611122670785136667494506131169958317348307605392021384747242028329
q=24465336953517562924106156911826018553319540976333948699447534971518714922749336825863392778858793409162652132362494212868796904698763509029469969840426077416037584221870348368577022362637462333098045037540329657844034602545791031614164636877912318340433948337885042773066739248060723260059184892949877143091263163375961645150820227350460699907099404756240428109513563012500937025882296249627018811757439238401562625397685696770078296823932408099169368172008807906727357922077351794134131601209937565918289872062232970500945605717629979977082702949348270916504726143040039099671798403935770866181583244864425666458341050686101
print(p*q==number)

c0 = 815188129004593690
c1 = 127925291615994657581931619146695269807090069321028068300026702785628490435087413298680092490257386473119689267569976305630148807575684825719646470673354518537583693756638610236703360575725390523075157347945650329643185755019374721283312409555437073732909098741047201773844526561647418227464551267229483364364787507813737149585117565634566192141414340259600731010898093526776126496041547237731611641645486484003184145020567881814736379969229029494635289881135938616525514478902350456632528118064943796968955206904548914444880294647813769276998813113219946458705248043346165647674144729512746228364422970492090341913955974680328429531371057246002643999064173272750228905488785306922291142352536443928185480992771540164041351189897263855717835200997174303403999921094709386555246470299674355058943232903678863339196093611888915090594863104904225697723818302850752252778621729255567862244645828296741411364052759345927008961382069718216739397512177938134054358858778504307167668875379987274830574712603824004594928740077761311104953146589024383734236839245668317380100215644546947907324757631546712895527026941128733402210258099040798244092233062921213678241433301492159422755411303594795618110694805740300672599304274581599355787281881473140136530753285
c2 = 104454128536114134666041330893412849924539319238173846030358370053912259066553198144201647771409151179389296499444225182922737580937571253329036303241246786394696273703737240494606350619424942154134043974057071462964750990605316877522861478098457922126670980711982715700886739488588258928454751146720846461285104408526738717417461756044249496795236713285815410740335507214955619176318929380672905570604946736070454970829122165657529519191829096299562653289959758115282220314539044233440940890830246113981226775616062418119272940675413756550528704261381830683804964448149613789234326868825958311202712158979318207791357868949882157781068305218079123962336473944242076822566261833638654949217602001305205868861207596016799305223552788863815955231724125485952140180911558328890683991762828843660578236671443539626857037266048369875048432191608492096923173890923193063698396903093080818130375913491435899432596884306387277070900092571026594195475769816837963280460673050909448174467601579491721191905742242149320815840931148597139521486968369237822382185925961430998718690684270284663782612688833325942954176755873192287461806363161966656749124978838440843037636615696962613067946478062682619739085469224316287147692903237078068956379036902948739451784308
c3 = 287293965964521577536949600465877039412983676330501517864975724662075373903418313335625721299388975721491357903306320184247853204477040142941778760057485916689064629860222657837690248122034022696608633347098541733229160810131864253603149064874701423636836348322909135954798560398776651665237804954916116590130313684752444052866519034694526102201271444707642449670451542864865493541141728546221679654661093081848121118684594168895062943920921063566925549212250270641028144352434459819122102852072762780335391277683962786782857084040582699842796641523261150308932398544110620418151887847658837961044285094404774616962577265970393150696357457400719726381090518685568644813512490876890790663593699326420593277088351600861395830498853994952245899881834621106473224692036187989636146643992437367194572335837111809655664187790935259739926115874944166340456171845363032300979740488782920318711668046034568790879401209465850491455677846746238706089490902017942125993304620807882387410264371825909245185927481186838760450566656551893404361562801495420174484277284394683958112760663980049171039021132584343301267863299152953512497843386144751245181609419591873712505993146385725244308823894723973026051800808472848805433371109206822668160634407950261536850484088

e = 0x10001

m_ = bytes_to_long(b"Lorem Ipsum is simply dummy text of")
c = pow(m_, e, p*q)
print(c==c1)


e = 0x10001
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
print("d =", d)


m = pow(c1, d, p*q)
print(bytes.fromhex(hex(m)[2:]))



        