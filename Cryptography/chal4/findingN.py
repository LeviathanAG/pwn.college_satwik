# Running modular exponentiation checks for c2 and c3
from Crypto.Util.number import bytes_to_long
# Define values (copied from the conversation)
e = 0x10001

m2_bytes = b"Lorem Ipsum is simply dummy text of"
m3_bytes = b"the printing and typesetting industry"


c2_given = 418890251904422338706957611421569713599475826871001739558191684601388449650152765911998711537988904079604825287425796246874064998467581933676766740276223130512121475534509500906303621372902538391197985667314991617366490958256261589788658330879501311575214355098129174833153268908921830243668239944880771231374562140218364497357200136629700069255932543223923482495870074707111120451362554833143866196241248965622137300308458020075178884826599869468192779089688042987230897822965311025559085617532440006008145374498239750459752867013499291186919435971476183536368572315123025685251906580373379532567407841278998750211643222814641379014359519765178922197378415008018742373687025319912434754473634000405621670429845615829606319472740366005692531091593902806059645864340549295004347573958153532603707014866773610622706191722954455556234964159294477921147142970948281403986676992495675871973003546547451018697326653270306439888029057025155935266124316232802691884200364090521817258795495048568535319874983392804957488408543560193998026023621855563942643595344375058898780939408936693927767141418075631817772771640076304380687135796731638368500728706355472787829783253738799261390172744812173292451298312862797200064214691060544863197664295108731846015154030

c3_given = 190811810050120865209824156809130063824082642875503984673341489763098727366205427052055470133956484888192787556965279057458202735763644682287126187488739754220453671617499360949402433803882789421289935722233410202158060161348469706317857657769596851756905143749344637459844481376063180759972165940828773282680870459825143243399853241097497965072703350090121459446119240686304376184692974401763638611364778015316493372724928332273667590520228859317736827518766547377260996083605920415799146639391124864236867655377010515929434187252987380987561774605013059520927018672304916705706757027248997822223146098187788646663485506011562999914062490090582015271726864412996313153191609573998301503216079446263452984530121506373642374695022390392750139738397412705355004162736773499011351292523952173218848820917869266831297020607745283412199967104923346668987493844788535168652353006869247800301797740066427143271091200731194446853114363751413040812819492693548358259468689679973375925525937014969548066932002942276967982618075738500601962311495855729288949425174472363574117979597855715622935810469813738764225650898950251164414659358486839805968243664080511823670381190757948934415918646156517685118376421251462932816329678098177731334821361792754081126859001

n_candidate = 1314128611846500918795990438026087067954022930391193189555893070625484242614041970962271096939563219463666493107315840816325341171661703421870782414223242117570832424509366068501791432252189685131103253131463946031011221719169771710279423375103044167114410556734037776432559813595089017978537259682730686928704340538777850229279707377216986920783454479033150032534715129892950002711570443940671282653555979897220666550353422198098517731000692073170291375183834162188590521675247206086027379701777689020779044513164620317132441701951693704729917811479626315926728804892870022173000974796509696660890706339655708170882483243048151534795459726867707485152449540305789125642639291867237155836807917298561278606576786798353772411345629855641573136936192268169065178341784959889199041784619107337599763715113745145008591387744454309331343609220323920758334921220681640990222142216454381801977857320713615102999724437259964116569812856439892871616643230984008781375550366312730137130679093387335372910231322894970886417093748232818141505396011195511282860807529232111076710892980289992506540904344775882237386913647212179117166459986685725698492130685846920815204516369312730328433060722863989544437938155013169438351561757506080281234867769438797458586276382
c1 = 448460614418210167098423669378333610872853118969873220291983197117877085788496431866260614635825627856559358989501325551110746888245223368672502689533122765261523731243946020360335223214722737310410239116490480240464763195831296797531281169696073444264552294453348008927081194570876904329242754184288805935254982276331341330183580890462510450605053156174476618987288994077283452641018931274426775483488334245991073609858426623671554514066850654900847503515595374917906619976459063918531715051612988942155763335203472551889888311440392402981057493579351486261460938920694063586809661181757140309845989880469323951795178283256766711324763772988511882471680133152522268943506909448821467207657317715002526569138778600228929439598232153311868911525058320979950196916511254734247408438555799802201785356056032947122753163250079568869004106192780860036427294382962709716383150685604638728461574770754577484332203305849753464113123630234152937796226609332862930004180795410207499938859135016393658462399717357371442661407016080199507616567413277199808069082336534542625939387751949555819295679064653483584415969089450624053537751587839853852413276184794920691323693894997669159086140691413099798542666801838250632768893314293037934977592481961617881910058708

# Convert plaintexts
m2 = bytes_to_long(m2_bytes)
m3 = bytes_to_long(m3_bytes)

# Compute ciphertexts mod n
c2_calc = pow(m2, e, n_candidate)
c3_calc = pow(m3, e, n_candidate)

# c1 = pow(m1,e,n_candidate)
# we know c1 but me dont know m1



print("c2_given == c2_calc ?", c2_given == c2_calc)
print("c3_given == c3_calc ?", c3_given == c3_calc)

# If they don't match, print the computed values for inspection (but they match?)
if c2_given != c2_calc:
    print("Calculated c2:", c2_calc)
else:
    print("c2 matches provided ciphertext.")

if c3_given != c3_calc:
    print("Calculated c3:", c3_calc)
else:
    print("c3 matches provided ciphertext.")
